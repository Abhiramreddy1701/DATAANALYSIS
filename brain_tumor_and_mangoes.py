# -*- coding: utf-8 -*-
"""Brain Tumor and mangoes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TgRgFJqbfL3tcnjn3e5jQXT0rZdBzevj
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
IMG_SIZE = 224
BATCH_SIZE = 32

train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2)
train_generator = train_datagen.flow_from_directory("/content/drive/MyDrive/train",
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training')
val_generator = train_datagen.flow_from_directory(
    "/content/drive/MyDrive/train",
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation'
)
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    "/content/drive/MyDrive/test",
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

from google.colab import drive
drive.mount('/content/drive')

model = keras.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(train_generator,validation_data=val_generator,epochs=5)

model.save("Model.h5","label.txt")

#test your image
from keras.models import load_model  # TensorFlow is required for Keras to work
from PIL import Image,ImageOps
from tensorflow.keras.preprocessing import image
import numpy as np

#load the model
model = load_model('/content/Model.h5')
#load and preproces the test image 
test_image_path ='/content/drive/MyDrive/test (1)/pred/pred14.jpg'
img=image.load_img(test_image_path,target_size=(224,224))
img_array=image.img_to_array(img)
img_array=np.expand_dims(img_array,axis=0)
img_array/=255

#Make predicitons 
prediction = model.predict(img_array)

#print the prediciton
if prediction<0.5:
  print("Prediction : No Brain Tumor (Probability : ",prediction[0][0],")")
else:
  print("Prediction : Brain Tumor (Probability : ",prediction[0][0],")")


